import pygame
import sys
import random
import time
import RPi.GPIO as GPIO
from rpi_ws281x import PixelStrip, Color  # Biblioteca para WS2812B
from dataclasses import dataclass
import librosa

# **Configuración del strip LED WS2812B**
LED_COUNT = 7  # Número de LEDs (uno por botón)
LED_PIN = 18   # GPIO donde se conectan los datos del strip
LED_FREQ_HZ = 800000  # Frecuencia de actualización
LED_DMA = 10  # Canal DMA
LED_BRIGHTNESS = 255  # Brillo de los LEDs
LED_INVERT = False  # Si se usa un transistor para invertir la señal

# Inicializar el strip LED
strip = PixelStrip(LED_COUNT, LED_PIN, LED_FREQ_HZ, LED_DMA, LED_INVERT, LED_BRIGHTNESS)
strip.begin()  # Iniciar el strip LED

@dataclass
class Song:
    filename: str
    name: str
    bpm: int
    duration: float
    background_color: tuple = (0, 0, 0)

@dataclass
class Difficulty:
    name: str
    speed: float
    score_multiplier: float
    timing_window: float
    note_speed: int

COLORS = {
    'BLACK': (0, 0, 0),
    'WHITE': (255, 255, 255),
    'GREEN': (50, 255, 50),
    'RED': (255, 50, 50),
    'YELLOW': (255, 255, 50),
    'PURPLE': (150, 50, 255),
    'CYAN': (50, 255, 255)
}

class RhythmGame:
    def __init__(self):
        GPIO.setmode(GPIO.BCM)
        self.buttons = [17, 27, 22, 5, 6, 13, 19]  # 7 botones conectados a estos pines GPIO
        self._setup_gpio()

        pygame.init()
        pygame.mixer.init()
        pygame.font.init()

        self.screen_width = 800
        self.screen_height = 600
        self.screen = pygame.display.set_mode((self.screen_width, self.screen_height))
        pygame.display.set_caption("Rhythm Master")

        self.songs = [
            Song("cancion1.mp3", "Melodía Suave", 120, 180, COLORS['PURPLE']),
            Song("cancion2.mp3", "Ritmo Latino", 140, 200, COLORS['YELLOW']),
            Song("cancion3.mp3", "Rock Intenso", 160, 220, COLORS['RED'])
        ]

        self.notes = []
        self.current_song = None
        self.start_time = None

    def _setup_gpio(self):
        """Configura los pines GPIO como entradas con resistencias pull-up."""
        for pin in self.buttons:
            GPIO.setup(pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)

    def analyze_audio(self, filename):
        """Detecta los beats y genera notas sincronizadas."""
        y, sr = librosa.load(filename)
        _, beat_frames = librosa.beat.beat_track(y=y, sr=sr)
        beat_times = librosa.frames_to_time(beat_frames, sr=sr)

        # Genera una lista de notas para los botones
        self.notes = [
            {'time': beat, 'lane': i % len(self.buttons), 'y': 0, 'active': False}
            for i, beat in enumerate(beat_times)
        ]

    def start_song(self):
        """Inicia la canción y guarda el tiempo de inicio."""
        pygame.mixer.music.load(self.current_song.filename)
        pygame.mixer.music.play()
        self.start_time = time.time()

    def update_led_sequence(self):
        """Actualiza los LEDs según la siguiente nota."""
        for i in range(LED_COUNT):
            strip.setPixelColor(i, Color(0, 0, 0))  # Apaga todos los LEDs

        current_time = time.time() - self.start_time
        for note in self.notes:
            if note['time'] <= current_time and not note['active']:
                strip.setPixelColor(note['lane'], Color(0, 255, 0))  # Enciende en verde
                strip.show()
                break  # Solo muestra la primera nota activa

    def gameplay_loop(self):
        """Bucle principal del juego."""
        clock = pygame.time.Clock()
        self.start_song()

        while pygame.mixer.music.get_busy():
            self.update_led_sequence()  # Actualiza los LEDs

            # Actualiza las posiciones de las notas
            for note in self.notes:
                if note['active']:
                    note['y'] += 5  # Desplaza la nota hacia abajo
                    if note['y'] > self.screen_height:
                        self.notes.remove(note)

            self.handle_input()
            clock.tick(60)

    def handle_input(self):
        """Maneja la entrada de los botones GPIO."""
        for i, pin in enumerate(self.buttons):
            if GPIO.input(pin) == GPIO.LOW:
                for note in self.notes:
                    if note['lane'] == i and not note['active']:
                        note['active'] = True
                        strip.setPixelColor(i, Color(255, 0, 0))  # Enciende en rojo al acertar
                        strip.show()
                        break

    def run(self):
        """Ejecuta el juego."""
        try:
            self.current_song = self.songs[0]  # Selecciona la primera canción
            self.analyze_audio(self.current_song.filename)
            self.gameplay_loop()
        finally:
            self.cleanup()

    def cleanup(self):
        """Limpia los recursos y apaga los LEDs."""
        GPIO.cleanup()
        pygame.quit()
        strip.show()  # Apaga todos los LEDs
        sys.exit()

if __name__ == "__main__":
    game = RhythmGame()
    game.run()
