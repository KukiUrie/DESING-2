import pygame
import cv2
import sys
import random
import time
import RPi.GPIO as GPIO  # Importa la biblioteca de GPIO

# Configurar los pines GPIO
GPIO.setmode(GPIO.BCM)  # Usar la numeración BCM de los pines
GPIO.setup(17, GPIO.IN, pull_up_down=GPIO.PUD_UP)  # Boton 1 en pin 17
GPIO.setup(27, GPIO.IN, pull_up_down=GPIO.PUD_UP)  # Boton 2 en pin 27
GPIO.setup(22, GPIO.IN, pull_up_down=GPIO.PUD_UP)  # Boton 3 en pin 22
GPIO.setup(5, GPIO.IN, pull_up_down=GPIO.PUD_UP)   # Boton 4 en pin 5
GPIO.setup(6, GPIO.IN, pull_up_down=GPIO.PUD_UP)   # Boton 5 en pin 6
GPIO.setup(13, GPIO.IN, pull_up_down=GPIO.PUD_UP)  # Boton 6 en pin 13

# Inicializar Pygame
pygame.init()

# Tamaño de la pantalla
screen_width = 800
screen_height = 600
screen = pygame.display.set_mode((screen_width, screen_height))

# Título de la ventana
pygame.display.set_caption("Focusboard")
icon_image = pygame.image.load("icon1.png")
pygame.display.set_icon(icon_image)

# Cargar el video usando OpenCV
video_path = "background.mp4"
cap = cv2.VideoCapture(video_path)

# Verificar si el video se cargó correctamente
if not cap.isOpened():
    print("No se pudo cargar el video.")
    sys.exit()

# Variables para controlar la reproducción del video
fps = cap.get(cv2.CAP_PROP_FPS)
frame_delay = int(1000 / fps)  # Tiempo de espera entre cuadros

# Colores
WHITE = (255, 255, 255)
BLUE = (0, 0, 255)
BLACK = (0, 0, 0)

# Configuración de fuente
font = pygame.font.Font(None, 40)

# Cargar la imagen personalizada del botón "Start"
start_button_image = pygame.image.load("star2.png")  # Ruta a tu imagen
start_button_image = pygame.transform.scale(start_button_image, (120, 80))  # Escalar imagen

# Variables para animación básica (botón Start más grande al pasar el ratón)
start_button_hover = False

# Variables del juego de teclas
gpio_key_map = {
    17: "Rojo",
    27: "Verde",
    22: "Azul",
    5: "Amarillo",
    6: "Naranja",
    13: "Morado"
}

# Variables globales
score = 0
running = True
difficulty = "Medio"  # Dificultad por defecto
difficulty_speed_map = {
    "Facil": 4,    # Más tiempo entre desafíos
    "Medio": 3,    # Tiempo moderado
    "Dificil": 2   # Menos tiempo entre desafíos
}

# Función para mostrar mensaje en pantalla
def display_message(message):
    screen.fill(BLACK)
    text = font.render(message, True, WHITE)
    screen.blit(text, (screen_width // 2 - text.get_width() // 2, screen_height // 2 - text.get_height() // 2))
    pygame.display.flip()

# Función principal del juego de teclas
def game_loop(song):
    global score, running, difficulty
    score = 0
    timer = 0
    start_time = time.time()  # Iniciar el temporizador

    # Reproducir la canción seleccionada
    pygame.mixer.music.load(song)
    pygame.mixer.music.play(-1)  # Repetir indefinidamente hasta que se detenga manualmente

    display_message("Presiona Enter para comenzar.")

    # Espera hasta que el jugador presione Enter
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
                return
            elif event.type == pygame.KEYDOWN and event.key == pygame.K_RETURN:
                break
        else:
            continue
        break

    # Juego activo
    while running:
        # Selección aleatoria de botón GPIO
        gpio_pin, color = random.choice(list(gpio_key_map.items()))
        display_message(f"Presiona el botón {color}")

        # Reiniciar temporizador para esta ronda
        round_start_time = time.time()
        waiting_for_input = True

        while waiting_for_input:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
                    return

            # Verificar si se presionó alguno de los botones físicos
            for pin, btn_color in gpio_key_map.items():
                if GPIO.input(pin) == GPIO.LOW:  # Si el botón se presiona
                    if pin == gpio_pin:
                        score += 1
                        waiting_for_input = False
                        break
                    else:
                        display_message("Botón incorrecto. Inténtalo de nuevo.")
                        pygame.time.delay(1000)
                        waiting_for_input = False
                        break
            
            # Control del tiempo de respuesta según dificultad
            if time.time() - round_start_time > difficulty_speed_map[difficulty]:
                display_message("Tiempo agotado. Inténtalo de nuevo.")
                pygame.time.delay(1000)
                waiting_for_input = False

        # Actualiza el temporizador
        timer += time.time() - start_time
        start_time = time.time()  # Reiniciar el temporizador para la siguiente ronda

        # Muestra la puntuación actual y el tiempo transcurrido
        display_message(f"Puntuación: {score} | Tiempo: {int(timer)}s")
        pygame.time.delay(1000)

    # Detener la música cuando el juego termine
    pygame.mixer.music.stop()

# Función para manejar las dificultades seleccionadas
def handle_difficulty_selection(selected_difficulty):
    global difficulty
    difficulty = selected_difficulty  # Actualiza la dificultad según lo seleccionado
    display_message(f"Dificultad seleccionada: {difficulty}")
    pygame.time.delay(1000)

# Crear botones
def create_button(text, x, y, width, height, color):
    button = pygame.Rect(x, y, width, height)
    pygame.draw.rect(screen, color, button)
    text_surface = font.render(text, True, BLACK)
    screen.blit(text_surface, (x + (width // 2) - (text_surface.get_width() // 2), y + (height // 2) - (text_surface.get_height() // 2)))
    return button

# Variables para el estado del menú
menu_state = {
    'main': True,
    'level': False,
    'difficulty': False,
    'Cancion': False
}

# Crear botones según el estado del menú
def create_buttons():
    screen.fill(BLACK)  # Limpia la pantalla

    if menu_state['main']:
        # Botón de inicio
        start_button = create_button("Iniciar", screen_width // 2 - 60, screen_height // 2 - 25, 120, 50, BLUE)
        return start_button

    elif menu_state['level']:
        num_levels = 5  # Número de niveles
        button_width = 120
        button_height = 50
        spacing = (screen_width - (num_levels * button_width)) // (num_levels + 1)  # Espaciado dinámico y centrado

        level_buttons = [
            create_button(f"Level {i+1}", spacing + i * (button_width + spacing), 250, button_width, button_height, BLUE)
            for i in range(num_levels)
        ]
        return level_buttons

    elif menu_state['difficulty']:
        num_difficulties = 3  # Número de dificultades
        button_width = 150
        button_height = 50
        spacing = (screen_width - (num_difficulties * button_width)) // (num_difficulties + 1)  # Espaciado dinámico

        difficulty_buttons = [
            create_button(difficulty, spacing + i * (button_width + spacing), 250, button_width, button_height, BLUE)
            for i, difficulty in enumerate(["Facil", "Medio", "Dificil"])
        ]
        return difficulty_buttons

    elif menu_state['Cancion']:
        num_songs = len(songs)  # Número de canciones
        button_width = 100
        button_height = 50
        spacing = (screen_width - (num_songs * button_width)) // (num_songs + 1)  # Espaciado dinámico

        song_buttons = [
            create_button(f"Cancion {i+1}", spacing + i * (button_width + spacing), 250, button_width, button_height, BLUE) 
            for i in range(num_songs)
        ]
        return song_buttons

    return None  # Si no hay menú activo, devolver None

# Actualiza el fondo animado
def update_background():
    ret, frame = cap.read()
    if not ret:
        cap.set(cv2.CAP_PROP_POS_FRAMES, 0)
        return
    frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    frame = pygame.surfarray.make_surface(frame.swapaxes(0, 1))
    screen.blit(frame, (0, 0))

# Función principal del bucle
def main_loop():
    global running
    while running:
        update_background()
        create_buttons()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
                continue

            if event.type == pygame.MOUSEBUTTONDOWN:
                if menu_state['main']:
                    if start_button.collidepoint(event.pos):
                        menu_state['main'] = False
                        menu_state['difficulty'] = True
                    continue

                if menu_state['level']:
                    for button in level_buttons:
                        if button.collidepoint(event.pos):
                            game_loop(songs[0])  # Aquí puedes seleccionar la canción correspondiente
                            continue

                    if back_button.collidepoint(event.pos):
                        menu_state['main'] = True
                        menu_state['level'] = False

                if menu_state['difficulty']:
                    for button in difficulty_buttons:
                        if button.collidepoint(event.pos):
                            handle_difficulty_selection(button.text)  # Asumiendo que `button` tiene un atributo `text`
                            continue

                    if back_button.collidepoint(event.pos):
                        menu_state['main'] = True
                        menu_state['difficulty'] = False

                if menu_state['Cancion']:
                    for button in song_buttons:
                        if button.collidepoint(event.pos):
                            game_loop(songs[song_buttons.index(button)])  # Carga la canción seleccionada
                            continue

                    if back_button.collidepoint(event.pos):
                        menu_state['main'] = True
                        menu_state['Cancion'] = False

        # Actualiza la pantalla
        pygame.display.flip()
        pygame.time.delay(frame_delay)

    # Cerrar la ventana y liberar recursos
    cap.release()
    pygame.quit()
    GPIO.cleanup()  # Limpia los pines GPIO al finalizar

# Iniciar el bucle principal
main_loop()
